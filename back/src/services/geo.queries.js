"use strict";
// File: src/routes/geo.queries.ts
// Last change: Added latitude and longitude to location search queries
Object.defineProperty(exports, "__esModule", { value: true });
exports.GET_RECENT_DELIVERIES_WITH_COORDINATES_QUERY = exports.SEARCH_LOCATION_BY_COUNTRY_QUERY = exports.SEARCH_LOCATION_QUERY = exports.CHECK_LOCATION_EXISTS_QUERY = exports.GET_COUNTRY_POSTAL_FORMAT_QUERY = exports.GET_COUNTRIES_QUERY = void 0;
exports.GET_COUNTRIES_QUERY = "\nSELECT \n  code_2,\n  name_en,\n  name_local,\n  name_sk,\n  logistics_priority\nFROM geo.countries\nORDER BY logistics_priority DESC NULLS LAST, code_2;\n";
exports.GET_COUNTRY_POSTAL_FORMAT_QUERY = "\nSELECT \n  country_code,\n  postal_code_format,\n  postal_code_regex\nFROM geo.country_formats\nWHERE country_code = $1;\n";
exports.CHECK_LOCATION_EXISTS_QUERY = "\nSELECT EXISTS (\n  SELECT 1 \n  FROM geo.postal_codes p\n  WHERE ($3::varchar IS NULL OR p.country_code = $3)\n    -- Compare normalized postal_code from DB and normalized parameter $1\n    AND ($1::varchar IS NULL OR REPLACE(REPLACE(p.postal_code, ' ', ''), '-', '') LIKE REPLACE(REPLACE($1, ' ', ''), '-', '') || '%')\n    AND ($2::varchar IS NULL OR p.place_name ILIKE '%' || $2 || '%')\n  LIMIT 1\n) as found;\n";
exports.SEARCH_LOCATION_QUERY = "\nWITH matched_locations AS (\n  SELECT \n    p.country_code,\n    p.postal_code,\n    p.place_name,\n    c.logistics_priority,\n    p.latitude,\n    p.longitude\n  FROM geo.countries c\n  JOIN geo.postal_codes p ON p.country_code = c.code_2\n  WHERE \n    CASE \n      WHEN $3::TEXT IS NOT NULL \n        THEN c.code_2 LIKE $3 || '%'\n      ELSE true \n    END\n    AND CASE \n      WHEN $1::TEXT IS NOT NULL \n        THEN p.postal_code >= $1 AND p.postal_code < ($1::TEXT || 'Z')\n      ELSE true \n    END\n    AND CASE \n      WHEN $2::TEXT IS NOT NULL \n        THEN lower(p.place_name) LIKE '%' || lower($2) || '%'\n      ELSE true \n    END\n    AND CASE \n      WHEN $4::TEXT IS NOT NULL AND $5::TEXT IS NOT NULL\n        THEN (p.postal_code > $4 OR (p.postal_code = $4 AND p.place_name > $5))\n      ELSE true \n    END\n  ORDER BY c.logistics_priority DESC, p.postal_code\n  LIMIT CASE \n    WHEN $6::INTEGER IS NOT NULL THEN $6 * 5  \n    ELSE 100\n  END\n)\nSELECT \n  ml.country_code, \n  ml.postal_code, \n  ml.place_name, \n  c.name_en AS country,\n  ml.logistics_priority,\n  CONCAT('/flags/4x3/optimized/', LOWER(ml.country_code), '.svg') AS flag_url,\n  ml.latitude,\n  ml.longitude\nFROM matched_locations ml\nJOIN geo.countries c ON c.code_2 = ml.country_code\nORDER BY \n  ml.logistics_priority DESC,\n  ml.postal_code,\n  ml.place_name\nLIMIT CASE \n  WHEN $6::INTEGER IS NOT NULL THEN $6\n  ELSE 20\nEND;\n";
exports.SEARCH_LOCATION_BY_COUNTRY_QUERY = "\nWITH filtered_countries AS (\n  SELECT code_2\n  FROM geo.countries\n  WHERE code_2 = $3\n)\nSELECT \n  p.country_code, \n  p.postal_code, \n  p.place_name, \n  c.name_en AS country,\n  CONCAT('/flags/4x3/optimized/', LOWER(p.country_code), '.svg') AS flag_url,\n  p.latitude,\n  p.longitude\nFROM geo.postal_codes p \nJOIN geo.countries c ON c.code_2 = p.country_code\nJOIN filtered_countries fc ON fc.code_2 = p.country_code\nWHERE \n  CASE \n    WHEN $1::TEXT IS NOT NULL \n      THEN REPLACE(REPLACE(p.postal_code, ' ', ''), '-', '') >= REPLACE(REPLACE($1, ' ', ''), '-', '')\n        AND REPLACE(REPLACE(p.postal_code, ' ', ''), '-', '') < (REPLACE(REPLACE($1, ' ', ''), '-', '') || 'Z')\n    ELSE true \n  END\n  AND CASE \n    WHEN $2::TEXT IS NOT NULL \n      THEN lower(p.place_name) LIKE '%' || lower($2) || '%'\n    ELSE true \n  END\n  AND CASE \n    WHEN $4::TEXT IS NOT NULL \n      AND $5::TEXT IS NOT NULL\n      THEN (p.postal_code > $4 \n      OR (p.postal_code = $4 AND p.place_name > $5))\n    ELSE true \n  END\nORDER BY \n  p.postal_code,\n  p.place_name\nLIMIT $6;\n";
exports.GET_RECENT_DELIVERIES_WITH_COORDINATES_QUERY = "\nSELECT DISTINCT ON (d.id)\n    d.id,\n    d.delivery_id,\n    d.delivery_date,\n    d.delivery_time,\n    d.delivery_type,\n    d.delivery_country,\n    d.delivery_zip,\n    d.delivery_city,\n    d.weight,\n    d.id_pp,\n    d.id_carrier,\n    d.name_carrier,\n    d.vehicle_type,\n    p.latitude,\n    p.longitude\nFROM \n    deliveries d\nINNER JOIN \n    geo.postal_codes p \n    ON d.delivery_country = p.country_code \n    AND d.delivery_zip = p.postal_code\nWHERE \n    d.delivery_date >= CURRENT_DATE - 1\nORDER BY \n    d.id, d.delivery_date DESC, d.delivery_time DESC;\n";
