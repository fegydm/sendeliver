// File: prisma/schema.prisma
// Last change: Added missing organization management models

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "auth"]
}

model Organization {
  id                 Int                @id @default(autoincrement())
  name               String
  vatNumber          String?            @unique @map("vat_number")
  type               OrgType
  status             VerificationStatus @default(PENDING_VERIFICATION)
  foundedByUserId    Int?               @map("founded_by_user_id")
  foundedAt          DateTime?          @map("founded_at")
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime           @updatedAt @map("updated_at")
  
  // Relations
  memberships        OrganizationMembership[]
  trackableDevices   TrackableDevice[]
  invitations        OrganizationInvitation[]
  joinRequests       OrganizationJoinRequest[]
  permissions        OrganizationPermission[]
  
  // Self-reference for founder
  foundedBy          User?              @relation("FoundedOrganizations", fields: [foundedByUserId], references: [id])

  @@map("organizations")
  @@schema("public")
}

model User {
  id                   Int                 @id @default(autoincrement())
  email                String              @unique
  passwordHash         String?             @map("password_hash")
  googleId             String?             @unique @map("google_id")
  displayName          String?             @map("display_name")
  imageUrl             String?             @map("image_url")
  
  primaryRole          UserRole            @default(individual_customer) @map("primary_role")
  userType             UserType            @default(STANDALONE)
  selectedRole         SelectedRoleType?   @map("selected_role")
  
  // NEW: Forwarder mode toggle
  forwarderActiveMode  ForwarderModeType?  @map("forwarder_active_mode")
  
  isEmailVerified      Boolean             @default(false) @map("is_email_verified")

  // Hierarchy
  manager              User?               @relation("Hierarchy", fields: [managerId], references: [id])
  managerId            Int?                @map("manager_id")
  subordinates         User[]              @relation("Hierarchy")

  // Organization relations
  memberships          OrganizationMembership[]
  foundedOrganizations Organization[]      @relation("FoundedOrganizations")
  sentInvitations      OrganizationInvitation[] @relation("InvitationSender")
  joinRequests         OrganizationJoinRequest[]
  reviewedJoinRequests OrganizationJoinRequest[] @relation("ReviewedJoinRequests")
  grantedPermissions   OrganizationPermission[] @relation("PermissionGranter")
  receivedPermissions  OrganizationPermission[] @relation("PermissionReceiver")

  // Device relations
  ownedDevices         TrackableDevice[]   @relation("OwnedDevices")
  assignedDevices      TrackableDevice[]   @relation("AssignedDevices")
  createdDevices       TrackableDevice[]   @relation("CreatedDevices")
  deviceAssignments    DeviceAssignment[]  @relation("AssignedUser")
  assignedByMe         DeviceAssignment[]  @relation("AssignedBy")
  unassignedByMe       DeviceAssignment[]  @relation("UnassignedBy")

  // Verification
  verificationTokens   EmailVerificationToken[]

  createdAt            DateTime            @default(now()) @map("created_at")
  updatedAt            DateTime            @updatedAt @map("updated_at")

  @@map("users")
  @@schema("auth")
}

model OrganizationMembership {
  id             Int                @id @default(autoincrement())
  userId         Int                @map("user_id") 
  organizationId Int                @map("organization_id")
  role           UserRole
  status         OrgMembershipStatus @default(PENDING_APPROVAL)
  createdAt      DateTime           @default(now()) @map("created_at")
  updatedAt      DateTime           @updatedAt @map("updated_at")

  user           User               @relation(fields: [userId], references: [id])
  organization   Organization       @relation(fields: [organizationId], references: [id])

  @@unique([userId, organizationId])
  @@map("organization_memberships")
  @@schema("public")
}

// NEW: Organization Invitations
model OrganizationInvitation {
  id              Int              @id @default(autoincrement())
  organizationId  Int              @map("organization_id")
  invitedByUserId Int              @map("invited_by_user_id") 
  email           String
  role            UserRole
  token           String           @unique
  expiresAt       DateTime         @map("expires_at")
  status          InvitationStatus @default(PENDING)
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")

  organization    Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invitedBy       User             @relation("InvitationSender", fields: [invitedByUserId], references: [id])

  @@unique([organizationId, email])
  @@map("organization_invitations")
  @@schema("public")
}

// NEW: Join Requests (driver-initiated)
model OrganizationJoinRequest {
  id                Int               @id @default(autoincrement())
  organizationId    Int               @map("organization_id")
  userId            Int               @map("user_id")
  requestedRole     UserRole          @map("requested_role")
  message           String?
  status            JoinRequestStatus @default(PENDING)
  createdAt         DateTime          @default(now()) @map("created_at")
  reviewedAt        DateTime?         @map("reviewed_at")
  reviewedByUserId  Int?              @map("reviewed_by_user_id")

  organization      Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviewedBy        User?             @relation("ReviewedJoinRequests", fields: [reviewedByUserId], references: [id])

  @@unique([organizationId, userId])
  @@map("organization_join_requests")
  @@schema("public")
}

// NEW: Organization Permissions
model OrganizationPermission {
  id              Int            @id @default(autoincrement())
  organizationId  Int            @map("organization_id")
  userId          Int            @map("user_id")
  permission      PermissionType
  grantedByUserId Int            @map("granted_by_user_id")
  grantedAt       DateTime       @default(now()) @map("granted_at")

  organization    Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user            User           @relation("PermissionReceiver", fields: [userId], references: [id], onDelete: Cascade)
  grantedBy       User           @relation("PermissionGranter", fields: [grantedByUserId], references: [id])

  @@unique([organizationId, userId, permission])
  @@map("organization_permissions")
  @@schema("public")
}

model TrackableDevice {
  id                Int                  @id @default(autoincrement())
  name              String
  deviceIdentifier  String               @unique
  deviceType        DeviceType
  apiKey            String               @unique
  isActive          Boolean              @default(true)
  lastSeen          DateTime?
  
  // NEW: Additional fields
  createdByUserId   Int?                 @map("created_by_user_id")
  isShared          Boolean              @default(false)
  notes             String?

  organization      Organization?        @relation(fields: [organizationId], references: [id])
  organizationId    Int?                 @map("organization_id")

  owner             User?                @relation("OwnedDevices", fields: [ownerId], references: [id])
  ownerId           Int?                 @map("owner_id")

  assignedToUser    User?                @relation("AssignedDevices", fields: [assignedToUserId], references: [id])
  assignedToUserId  Int?                 @map("assigned_to_user_id")
  
  // NEW: Created by relation
  createdBy         User?                @relation("CreatedDevices", fields: [createdByUserId], references: [id])

  gpsData           GpsData[]
  assignments       DeviceAssignment[]

  createdAt         DateTime             @default(now()) @map("created_at")
  updatedAt         DateTime             @updatedAt @map("updated_at")

  @@map("trackable_devices")
  @@schema("public")
}

// NEW: Device Assignment History
model DeviceAssignment {
  id                 Int                @id @default(autoincrement())
  deviceId           Int                @map("device_id")
  userId             Int?               @map("user_id")
  assignedByUserId   Int                @map("assigned_by_user_id")
  assignedAt         DateTime           @default(now()) @map("assigned_at")
  unassignedAt       DateTime?          @map("unassigned_at")
  unassignedByUserId Int?               @map("unassigned_by_user_id")
  isActive           Boolean            @default(true)
  notes              String?

  device             TrackableDevice    @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  user               User?              @relation("AssignedUser", fields: [userId], references: [id], onDelete: SetNull)
  assignedBy         User               @relation("AssignedBy", fields: [assignedByUserId], references: [id])
  unassignedBy       User?              @relation("UnassignedBy", fields: [unassignedByUserId], references: [id])

  @@map("device_assignments")
  @@schema("public")
}

model GpsData {
  id              Int              @id @default(autoincrement())
  trackableDevice TrackableDevice  @relation(fields: [trackableDeviceId], references: [id])
  trackableDeviceId Int            @map("trackable_device_id")
  latitude        Float
  longitude       Float
  speed           Float?
  timestamp       DateTime         @default(now())
  accuracy        Float?
  heading         Float?
  altitude        Float?

  @@map("gps_data")
  @@schema("public")
}

model EmailVerificationToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])

  @@map("email_verification_tokens")
  @@schema("auth")
}

// ENUMS
enum SelectedRoleType {
  client
  forwarder
  carrier

  @@schema("auth")
}

enum UserRole {
  superadmin
  system_admin
  org_admin
  dispatcher
  driver
  accountant
  employee
  external_worker
  individual_customer
  tracker_user

  @@schema("auth")
}

enum UserType {
  ORGANIZED
  STANDALONE

  @@schema("auth")
}

// NEW: Forwarder Mode Enum
enum ForwarderModeType {
  CLIENT
  CARRIER

  @@schema("auth")
}

enum DeviceType {
  VEHICLE
  PERSON
  ASSET

  @@schema("public")
}

enum OrgMembershipStatus {
  NOT_APPLICABLE
  PENDING_APPROVAL
  ACTIVE
  REJECTED
  SUSPENDED

  @@schema("auth")
}

enum OrgType {
  CARRIER
  FORWARDER
  CLIENT

  @@schema("public")
}

enum VerificationStatus {
  PENDING_VERIFICATION
  VERIFIED
  REJECTED

  @@schema("public")
}

// NEW: Invitation Status Enum
enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED

  @@schema("public")
}

// NEW: Join Request Status Enum
enum JoinRequestStatus {
  PENDING
  APPROVED
  REJECTED

  @@schema("public")
}

// NEW: Permission Type Enum
enum PermissionType {
  MANAGE_VEHICLES
  ASSIGN_DRIVERS
  INVITE_MEMBERS
  MANAGE_PERMISSIONS
  VIEW_ANALYTICS

  @@schema("public")
}