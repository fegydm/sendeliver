generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int              @id @default(autoincrement())
  name          String?
  email         String           @unique
  passwordHash  String?
  role          Role             @default(client)
  permissions   String[]         @default([])
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  googleId      String?          @unique
  adminProfile  AdminProfile?    @relation("UserAdminProfile")
  messages      ContactMessage[] @relation("UserMessages")
  notifications Notification[]   @relation("UserNotifications")
  sessions      Session[]        @relation("UserSessions")
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation("UserSessions", fields: [userId], references: [id])
}

model ContactMessage {
  id        Int           @id @default(autoincrement())
  name      String
  email     String
  subject   String
  body      String
  status    MessageStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  userId    Int?
  user      User?         @relation("UserMessages", fields: [userId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  type      String
  data      Json
  timestamp DateTime @default(now())
  read      Boolean  @default(false)
  userId    Int
  user      User     @relation("UserNotifications", fields: [userId], references: [id])
}

model AdminProfile {
  id         Int      @id @default(autoincrement())
  userId     Int      @unique
  phone      String?
  department String?
  avatarUrl  String?
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation("UserAdminProfile", fields: [userId], references: [id])
}

model GpsData {
  id        Int       @id @default(autoincrement())
  vehicleId String    @map("vehicle_id") @db.VarChar(50)
  latitude  Float
  longitude Float
  accuracy  Float?
  altitude  Float?
  timestamp DateTime  @db.Timestamptz(6)
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)

  @@map("gps_data")
}

enum Role {
  superadmin
  admin
  client
  forwarder
  carrier
}

enum MessageStatus {
  PENDING
  REPLIED
  CLOSED
}
