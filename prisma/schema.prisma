// File: ./prisma/schema.prisma
// Last change: Added GpsData model for vehicle tracking

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // e.g. postgres://user:password@localhost:5432/dbsd
}

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

// Roles for access control
enum Role {
  superadmin
  admin
  client
  forwarder
  carrier
}

// Message status
enum MessageStatus {
  PENDING
  REPLIED
  CLOSED
}

// Users of the system
model User {
  id           Int      @id @default(autoincrement())
  name         String? // optional, may be set by OAuth or registration
  email        String   @unique
  passwordHash String? // nullable for OAuth-only accounts
  googleId     String?  @unique
  role         Role     @default(client)
  permissions  String[] @default([])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  messages      ContactMessage[] @relation("UserMessages")
  notifications Notification[]   @relation("UserNotifications")
  sessions      Session[]        @relation("UserSessions")
  adminProfile  AdminProfile?    @relation("UserAdminProfile")
}

// Sessions for refresh tokens or persistent login
model Session {
  id        Int      @id @default(autoincrement())
  user      User     @relation("UserSessions", fields: [userId], references: [id])
  userId    Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

// Contact form messages
model ContactMessage {
  id        Int           @id @default(autoincrement())
  name      String
  email     String
  subject   String
  body      String
  status    MessageStatus @default(PENDING)
  user      User?         @relation("UserMessages", fields: [userId], references: [id])
  userId    Int?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

// Real-time notifications
model Notification {
  id        Int      @id @default(autoincrement())
  type      String
  data      Json
  read      Boolean  @default(false)
  timestamp DateTime @default(now())
  user      User     @relation("UserNotifications", fields: [userId], references: [id])
  userId    Int
}

// Additional profile data for admin users
model AdminProfile {
  id     Int  @id @default(autoincrement())
  user   User @relation("UserAdminProfile", fields: [userId], references: [id])
  userId Int  @unique

  phone      String? // optional internal contact number
  department String? // e.g. support, operations
  avatarUrl  String? // link to profile picture
  notes      String? // internal admin notes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// GPS data for vehicle tracking
model GpsData {
  id         Int      @id @default(autoincrement())
  vehicleId  String   @map("vehicle_id")
  latitude   Float
  longitude  Float
  accuracy   Float?
  altitude   Float?
  timestamp  DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  @@map("gps_data")
}